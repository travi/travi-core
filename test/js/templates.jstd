TestCase("TemplateTests", {
    templates: travi.templates,

    templateName: 'someName',
    templateAsString: 'template',

    setUp: function () {
        var testCase = this;

        sinon.stub(jQuery, 'ajax', function (options) {
            options.success(testCase.templateAsString);
        });

        travi.templates.init();
    },

    tearDown: function () {
        travi.test.common.restore([
            jQuery.ajax,
            jQuery.Deferred,
            jQuery.templates,
            jQuery.render[this.templateName],
            this.templates.get,
            this.templates.preLoad
        ]);
    },

    "test preloading template requests it from the server, caches it, and returns the promise": function () {
        var pathToTemplate = '/path/to/template',
            call,
            promise,
            promiseToReturn = {},
            constructedDeferred = {
                promise: function () {
                    return promiseToReturn;
                },
                resolve: function () {}
            };

        sinon.stub(jQuery, 'Deferred').returns(constructedDeferred);
        sinon.spy(constructedDeferred, 'resolve');

        sinon.spy(jQuery, 'templates');

        promise = travi.templates.preLoad(this.templateName, pathToTemplate);

        assert(jQuery.ajax.calledOnce);
        call = jQuery.ajax.getCall(0);
        assertEquals(pathToTemplate, call.args[0].url);
        assertEquals("GET".toLowerCase(), call.args[0].type);
        assertEquals("text", call.args[0].dataType);

        this.assertPromiseResolvedAfterCachingTemplate(constructedDeferred);
        this.assertTemplateWasCached(this.templateName, this.templateAsString);
        this.assertPromiseWasReturned(promiseToReturn, promise);
    },

    'test preLoad can accept a list': function () {
        this.templates.preLoad({

        });
    },

    "test that getting a template by name requests it from the server and returns the promise": function () {
        var promise = travi.templates.get(this.templateName);

        assertEquals(
            '/templates/' + this.templateName + '.tmpl',
            jQuery.ajax.getCall(0).args[0].url
        );

        assertObject(promise);
        assertFunction(promise.promise);
    },

    "test template is rendered and returned as string": function () {
        var renderedTemplate,
            dataForTemplate = {
                data: 'something'
            };

        sinon.stub(jQuery.render, this.templateName).returns('renderedTemplate');

        renderedTemplate = travi.templates.render(this.templateName, dataForTemplate);

        this.assertTemplateRenderedWithData(dataForTemplate);

        assertString(renderedTemplate);
    },

    'test callback called after template loaded from server': function () {
        var constructedDeferred = new $.Deferred(),
            dataForTemplate = {
                data: 'something'
            },
            callback = sinon.spy(),
            renderedTemplate = 'renderedTemplate';

        this.templates.preLoad(this.templateName);

        constructedDeferred.resolve();
        sinon.stub(jQuery, 'Deferred').returns(constructedDeferred);
        sinon.stub(jQuery.render, this.templateName).returns(renderedTemplate);

        this.templates.render(this.templateName, dataForTemplate, callback);

        sinon.assert.calledOnce($.render[this.templateName]);
        sinon.assert.calledWith($.render[this.templateName], dataForTemplate);

        sinon.assert.calledOnce(callback);
        sinon.assert.calledWith(callback, renderedTemplate);
    },

    'test callback not called when template not loaded': function () {
        var constructedDeferred = new $.Deferred(),
            dataForTemplate = {
                data: 'something'
            },
            callback = sinon.spy(),
            renderedTemplate = 'renderedTemplate';

        travi.test.common.restore($.ajax);
        sinon.stub($, 'ajax');

        sinon.stub(jQuery, 'Deferred').returns(constructedDeferred);
        sinon.stub(jQuery.render, this.templateName);

        travi.templates.render(this.templateName, dataForTemplate, callback);

        sinon.assert.notCalled($.render[this.templateName]);
        sinon.assert.notCalled(callback);
    },

    "test that template is not requested from server if already cached": function () {
        travi.templates.get(this.templateName);
        travi.templates.get(this.templateName);

        sinon.assert.calledOnce(jQuery.ajax);
    },

    "test that caching does not prevent other templates from loading from server": function () {
        travi.templates.get(this.templateName);
        travi.templates.get('someOtherTemplateName');

        sinon.assert.calledTwice(jQuery.ajax);
    },

    'test template can be rendered without data': function () {
        this.templates.render(this.templateName);
    },

    assertTemplateRenderedWithData: function (data) {
        assert(jQuery.render[this.templateName].calledOnce);
        assertSame(data, jQuery.render[this.templateName].getCall(0).args[0]);
    },

    assertPromiseResolvedAfterCachingTemplate: function (deferred) {
        assert(deferred.resolve.calledOnce);
    },

    assertTemplateWasCached: function (templateName, templateAsString) {
        assert(jQuery.templates.calledOnce);
        assertEquals(templateName, jQuery.templates.getCall(0).args[0]);
        assertEquals(templateAsString, jQuery.templates.getCall(0).args[1]);
    },

    assertPromiseWasReturned: function (returnedPromise, promise) {
        assertObject(promise);
        assertSame(returnedPromise, promise);
    }
});