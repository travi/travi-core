TestCase('Screen Width Detection', {
    framework: travi.framework,
    templates: travi.templates,
    cookies: travi.cookies,

    setUp: function () {
        sinon.stub(this.templates, 'get').returns({
            then: function (callback) {
                callback();
            }
        });
        sinon.stub(this.cookies, 'exists').returns(false);
        sinon.stub(this.cookies, 'create');
    },

    tearDown: function () {
        travi.test.common.restore([
            this.templates.get,
            Modernizr.mq,
            travi.location.refresh,
            this.cookies.exists,
            this.cookies.create
        ]);
    },

    'test Enhancement version cookie name defined as what server is expecting': function () {
        assertEquals('enhancementVersion', this.framework.constants().ENHANCEMENT_VERSION_KEY);
    },

    'test mobile enhancement version cookie value defined as what server is expecting': function () {
        assertEquals('mobile', this.framework.constants().MOBILE_ENHANCEMENT_VERSION);
    },

    'test desktop enhancement version cookie value defined as what server is expecting': function () {
        assertEquals('desktop', this.framework.constants().DESKTOP_ENHANCEMENT_VERSION);
    },

    'test Enhancement version set to mobile when screen width reported within smartphone range': function () {
        sinon.stub(Modernizr, 'mq').returns(true);
        sinon.stub(travi.location, 'refresh');

        this.framework.init();

        sinon.assert.calledOnce(Modernizr.mq);
        sinon.assert.calledWith(Modernizr.mq, 'only screen and (min-width: 320px) and (max-width: 480px)');

        sinon.assert.calledOnce(this.cookies.create);
        sinon.assert.calledWith(
            this.cookies.create,
            this.framework.constants().ENHANCEMENT_VERSION_KEY,
            this.framework.constants().MOBILE_ENHANCEMENT_VERSION,
            this.framework.constants().DAYS_BEFORE_ENHANCEMENT_COOKIE_EXPIRATION
        );
        sinon.assert.calledOnce(travi.location.refresh);
    },

    'test Enhancement version set to desktop at higher screen width': function () {
        sinon.stub(Modernizr, 'mq').returns(false);
        sinon.stub(travi.location, 'refresh');

        this.framework.init();

        sinon.assert.calledOnce(Modernizr.mq);
        sinon.assert.calledWith(Modernizr.mq, 'only screen and (min-width: 320px) and (max-width: 480px)');

        sinon.assert.calledOnce(this.cookies.create);
        sinon.assert.calledWith(
            this.cookies.create,
            this.framework.constants().ENHANCEMENT_VERSION_KEY,
            this.framework.constants().DESKTOP_ENHANCEMENT_VERSION,
            this.framework.constants().DAYS_BEFORE_ENHANCEMENT_COOKIE_EXPIRATION
        );
        sinon.assert.calledOnce(travi.location.refresh);
    }
});