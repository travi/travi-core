TestCase('EntityListTests', {
    entityList: travi.framework.entityList,
    pagination: travi.pagination,

    entities: [1, 2, 3],

    setUp: function () {
        travi.unsubscribe(this.pagination.events.NEXT_PAGE_REQUESTED, this.entityList.requestMoreAnnouncements);
        travi.unsubscribe(this.pagination.events.PREV_PAGE_REQUESTED, this.entityList.requestMoreAnnouncements);
        $('body').append($.render({}, 'entityList'));

        this.entityList.init();

        this.$form = $('form');
        this.$confirmation = $('#confirmation');
    },

    tearDown: function () {
        travi.test.common.restore(jQuery.ajax);
        travi.test.common.restore(travi.publish);

        travi.unsubscribe(this.pagination.events.NEXT_PAGE_REQUESTED, this.entityList.requestMoreAnnouncements);
        travi.unsubscribe(this.pagination.events.PREV_PAGE_REQUESTED, this.entityList.requestMoreAnnouncements);
        this.$confirmation.dialog('destroy').remove();
    },

    'test events defined properly': function () {
        assertEquals('page-loaded', this.entityList.constants.get('PAGE_EVENT'));
    },

    'test confirmation ready for use': function () {
        assertEquals(this.$confirmation.length, 1);
        assert(this.$confirmation.is(':not(:visible)'));

        assertTrue(this.$confirmation.dialog('option', 'modal'));
        assertFalse(this.$confirmation.dialog('option', 'resizable'));
        assertFalse(this.$confirmation.dialog('option', 'autoOpen'));
    },

    'test submitting "remove" form shows confirmation': function () {
        this.$form.submit();

        this.assertModalDialogIsShown();
    },

    'test form gets converted to link': function () {
        assertEquals(1, this.$form.length);
        assert(this.$form.is(':not(:visible)'));
        assert($("li.remove-item a.item-action").is(':visible'));
    },

    'test clicking link triggers submit event on corresponding form': function () {
        $('a.item-action').click();

        this.assertModalDialogIsShown();
    },

    'test confirming remove makes ajax POST and removes entity on success': function () {
        sinon.stub(jQuery, 'ajax', function (options) {
            options.success.call(null, {});
        });
        assertEquals(1, $('.entityList>li').length);
        $('a.item-action').click();
        $('.ui-dialog-buttonpane button').eq(0).click();

        assert(jQuery.ajax.calledOnce);
        this.assertAjaxCallMadeWith({
            url: '/admin/updates/45',
            method: 'post',
            dataType: 'json'
        }, jQuery.ajax.getCall(0).args[0]);

        assertEquals(0, $('.entityList>li').length);
    },

    'test request for next page loads more announcements': function () {
        var url = 'nextUrl';
        this.stubRequestForAnnouncements();
        sinon.stub(travi, 'publish');

        amplify.publish(this.pagination.events.NEXT_PAGE_REQUESTED, {url: url});

        assert(jQuery.ajax.calledOnce);
        this.assertAjaxCallMadeWith({
            url: url,
            method: 'get',
            dataType: 'json'
        }, jQuery.ajax.getCall(0).args[0]);

        this.assertLoadedDataAddedToList();
    },

    'test request for prev page loads more announcements': function () {
        var url = 'prevUrl';
        this.stubRequestForAnnouncements();
        sinon.stub(travi, 'publish');

        amplify.publish(this.pagination.events.PREV_PAGE_REQUESTED, {url: url});

        assert(jQuery.ajax.calledOnce);
        this.assertAjaxCallMadeWith({
            url: url,
            method: 'get',
            dataType: 'json'
        }, jQuery.ajax.getCall(0).args[0]);

        this.assertLoadedDataAddedToList();
    },

    'test offset defaults to zero': function () {
        var  url = 'prevUrl',
            call,
            testCase = this;
        sinon.stub(travi, 'publish');

        sinon.stub(jQuery, 'ajax', function (options) {
            options.success.call(null, {
                updates: {
                    updateList: {
                        entities: testCase.entities,
                        limit: 5
                    }
                }
            });
        });

        amplify.publish(this.pagination.events.PREV_PAGE_REQUESTED, {url: url});

        assert(jQuery.ajax.calledOnce);
        this.assertAjaxCallMadeWith({
            url: url,
            method: 'get',
            dataType: 'json'
        }, jQuery.ajax.getCall(0).args[0]);

        assertEquals(this.entities.length, $('.entityList > li').length);

        assert(travi.publish.calledOnce);
        call = travi.publish.getCall(0);
        assertEquals(this.entityList.constants.get('PAGE_EVENT'), call.args[0]);
        assertEquals(5, call.args[1].nextOffset);
        assertEquals(-5, call.args[1].prevOffset);
        assertEquals(0, call.args[1].offset);
    },

    assertModalDialogIsShown: function () {
        assert(this.$confirmation.is(':visible'));
        assertEquals(1, $('div.ui-widget-overlay').length, 1);
    },

    assertAjaxCallMadeWith: function (expected, options) {
        assertEquals(expected.url, options.url);
        assertEquals(expected.method, options.type);
        assertEquals(expected.dataType, options.dataType);
    },

    assertLoadedDataAddedToList: function () {
        var call,
            eventData;

        assertEquals(this.entities.length, $('.entityList > li').length);

        assert(travi.publish.calledOnce);
        call = travi.publish.getCall(0);
        assertEquals(this.entityList.constants.get('PAGE_EVENT'), call.args[0]);
        eventData = call.args[1];
        assertEquals(15, eventData.nextOffset);
        assertEquals(5, eventData.prevOffset);
        assertEquals(10, eventData.offset);
        assertEquals(34, eventData.total);
    },

    stubRequestForAnnouncements: function () {
        var testCase = this;

        sinon.stub(jQuery, 'ajax', function (options) {
            options.success.call(null, {
                updates: {
                    updateList: {
                        entities: testCase.entities,
                        offset: 10,
                        limit: 5,
                        totalEntities: "34"
                    }
                }
            });
        });
    }
});