TestCase('CookieTests', {
    cookies: travi.cookies,

    DAYS_BEFORE_EXP: 1,

    setUp: function () {
        this.cookies.clearAll();
    },

    tearDown: function () {
        this.cookies.clearAll();
    },

    'test cookie is created properly': function () {
        var cookieName = 'testCookie',
            cookieValue = "someValue";

        this.cookies.create(cookieName, cookieValue, this.DAYS_BEFORE_EXP);

        assertTrue(this.cookies.exists(cookieName));
        assertEquals(cookieValue, this.cookies.value(cookieName));
    },

    'test cookie gets removed': function () {
        var cookieToDelete = "toDelete";
        this.cookies.create(cookieToDelete, "will be deleted in this test", this.DAYS_BEFORE_EXP);

        this.cookies.remove(cookieToDelete);

        assertFalse(this.cookies.exists(cookieToDelete));
    },

    'test value returned properly when first in list': function () {
        var desiredCookie = "desiredCookie",
            valueOfDesired = "value of desired cookie";

        this.cookies.create(desiredCookie, valueOfDesired, this.DAYS_BEFORE_EXP);
        this.cookies.create("extraCookie", "value of extra cookie", this.DAYS_BEFORE_EXP);

        assertEquals(valueOfDesired, this.cookies.value(desiredCookie));
    },

    'test value returned properly when last in list': function () {
        var desiredCookie = "desiredCookie",
            valueOfDesired = "value of desired cookie";

        this.cookies.create("extraCookie", "value of extra cookie", this.DAYS_BEFORE_EXP);
        this.cookies.create(desiredCookie, valueOfDesired, this.DAYS_BEFORE_EXP);

        assertEquals(valueOfDesired, this.cookies.value(desiredCookie));
    },

    'test value returned properly when in the middle of the list': function () {
        var desiredCookie = "desiredCookie",
            valueOfDesired = "value of desired cookie";

        this.cookies.create("extraCookie", "value of extra cookie", this.DAYS_BEFORE_EXP);
        this.cookies.create(desiredCookie, valueOfDesired, this.DAYS_BEFORE_EXP);
        this.cookies.create("extraCookie2", "value of extra cookie", this.DAYS_BEFORE_EXP);

        assertEquals(valueOfDesired, this.cookies.value(desiredCookie));
    }
});