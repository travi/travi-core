travi.test.testCase("TemplateTests", (function () {
    'use strict';

    var pathToTemplate = '/path/to/template',
        templateName = 'someName',

        xhrDeferred,
        xhr,
        alternateXhrDeferred,
        ajaxSuccess;

    function simulateSuccessfulAjaxResponse() {
        ajaxSuccess(this.templateAsString);
        xhrDeferred.resolve();
    }

    function simulateTemplateAlreadyLoaded() {
        this.templates.preLoad(this.templateName);
        simulateSuccessfulAjaxResponse.call(this);
    }

    function createXhrToReturn(url) {
        var xhrToReturn;

        if (url === '/templates/' + templateName + '.tmpl' || url === pathToTemplate) {
            xhrDeferred = new $.Deferred();
            xhrToReturn = xhr = xhrDeferred.promise();
        } else {
            alternateXhrDeferred = new $.Deferred();
            xhrToReturn = alternateXhrDeferred.promise();
        }

        return xhrToReturn;
    }

    return {
        templates: travi.templates,

        templateName: templateName,
        pathToTemplate: pathToTemplate,
        templateAsString: 'template',

        setUp: function () {
            xhrDeferred = xhr = alternateXhrDeferred = ajaxSuccess = null;

            sinon.stub(jQuery, 'ajax', function (options) {
                ajaxSuccess = options.success;

                return createXhrToReturn(options.url);
            });

            travi.templates.init();
        },

        tearDown: function () {
            travi.test.common.restore([
                jQuery.ajax,
                jQuery.Deferred,
                jQuery.templates,
                this.templates.get,
                this.templates.preLoad
            ]);
            if (jQuery.render[this.templateName]) {
                travi.test.common.restore(jQuery.render[this.templateName]);
            }
        },

        'test pre-loading template requests it from the server, caches it, and returns the promise': function () {
            var promise = this.templates.preLoad(this.templateName, this.pathToTemplate);

            assert.calledWith($.ajax, sinon.match({
                type: 'get',
                dataType: 'text',
                url: this.pathToTemplate
            }));
            assert.same(promise, xhr);
        },

        'test that template is cached after server responds': function () {
            sinon.spy(jQuery, 'templates');
            this.templates.preLoad(this.templateName);
            assert.equals(xhr.state(), 'pending');

            simulateSuccessfulAjaxResponse.call(this);

            assert.calledWith(jQuery.templates, this.templateName, this.templateAsString);
            assert.equals(xhr.state(), 'resolved');
        },

        'test preLoad can accept a list': function () {
            var anotherTemplateName = 'anotherTemplate',
                pathToAnotherTemplate = '/path/to/another/template',
                templates = {},
                promise;
            templates[this.templateName] = this.pathToTemplate;
            templates[anotherTemplateName] = pathToAnotherTemplate;

            promise = this.templates.preLoad(templates);

            assert.equals(Object.keys(templates).length, $.ajax.callCount);
            assert.calledWith($.ajax, sinon.match({url: pathToTemplate}));
            assert.calledWith($.ajax, sinon.match({url: pathToAnotherTemplate}));

            assert.equals(promise.state(), 'pending');

            xhrDeferred.resolve();

            assert.equals(promise.state(), 'pending');

            alternateXhrDeferred.resolve();

            assert.equals(promise.state(), 'resolved');
        },

        "test that getting a template by name requests it from the server and returns the promise": function () {
            var promise = travi.templates.get(this.templateName);

            assert.calledWith(jQuery.ajax, sinon.match({url: '/templates/' + this.templateName + '.tmpl'}));

            assert.isObject(promise);
            assert.isFunction(promise.promise);
        },

        "test template is rendered and returned as string": function () {
            var renderedTemplate,
                dataForTemplate = {
                    data: 'something'
                };
            simulateTemplateAlreadyLoaded.call(this);
            sinon.stub(jQuery.render, this.templateName).returns('renderedTemplate');

            renderedTemplate = travi.templates.render(this.templateName, dataForTemplate);

            assert.calledWith(jQuery.render[this.templateName], dataForTemplate);
            assert.isString(renderedTemplate);
        },

        'test callback called after template loaded from server': function () {
            var dataForTemplate = {
                    data: 'something'
                },
                callback = sinon.spy(),
                renderedTemplate = 'renderedTemplate';

            this.templates.preLoad(this.templateName);
            simulateSuccessfulAjaxResponse.call(this);

            sinon.stub(jQuery.render, this.templateName).returns(renderedTemplate);

            this.templates.render(this.templateName, dataForTemplate, callback);

            assert.calledOnce($.render[this.templateName]);
            assert.calledWith($.render[this.templateName], dataForTemplate);

            assert.calledOnce(callback);
            assert.calledWith(callback, renderedTemplate);
        },

        'test callback not called when template not loaded': function () {
            var callback = sinon.spy();

            sinon.stub(jQuery.render, this.templateName);

            travi.templates.render(this.templateName, {}, callback);

            refute.called($.render[this.templateName]);
            refute.called(callback);
        },

        "test that template is not requested from server if already cached": function () {
            travi.templates.get(this.templateName);
            $.ajax.reset();

            travi.templates.get(this.templateName);

            refute.called(jQuery.ajax);
        },

        "test that caching does not prevent other templates from loading from server": function () {
            travi.templates.get(this.templateName);
            travi.templates.get('someOtherTemplateName');

            assert.calledTwice(jQuery.ajax);
        },

        'test template can be rendered without data': function () {
            var testCase = this;

            refute.exception(function () {
                testCase.templates.render(testCase.templateName);
            });
        }
    };
}()));