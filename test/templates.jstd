travi.test.testCase("TemplateTests", (function () {
    'use strict';

    return {
        templates: travi.templates,

        templateName: 'someName',
        pathToTemplate: '/path/to/template',
        templateAsString: 'template',

        setUp: function () {
            var testCase = this;

            sinon.stub(jQuery, 'ajax', function (options) {
                options.success(testCase.templateAsString);
            });

            travi.templates.init();
        },

        tearDown: function () {
            travi.test.common.restore([
                jQuery.ajax,
                jQuery.Deferred,
                jQuery.templates,
                jQuery.render[this.templateName],
                this.templates.get,
                this.templates.preLoad
            ]);
        },

        'test pre-loading template requests it from the server, caches it, and returns the promise': function () {
            var promise,
                promiseToReturn = {},
                constructedDeferred = {
                    promise: function () {
                        return promiseToReturn;
                    },
                    resolve: sinon.spy()
                };

            sinon.stub(jQuery, 'Deferred').returns(constructedDeferred);

            sinon.spy(jQuery, 'templates');

            promise = this.templates.preLoad(this.templateName, this.pathToTemplate);

            assert(jQuery.ajax.calledOnce);
            travi.test.common.assertAjaxCallMadeWith({
                type: 'get',
                dataType: 'text',
                url: this.pathToTemplate
            }, jQuery.ajax.getCall(0).args[0]);

            this.assertPromiseResolvedAfterCachingTemplate(constructedDeferred);
            this.assertTemplateWasCached(this.templateName, this.templateAsString);
            this.assertPromiseWasReturned(promiseToReturn, promise);
        },

        'test preLoad can accept a list': function () {
            var anotherTemplateName = 'anotherTemplate',
                pathToAnotherTemplate = '/path/to/another/template',
                templates = {};
            templates[this.templateName] = this.pathToTemplate;
            templates[anotherTemplateName] = pathToAnotherTemplate;

            this.templates.preLoad(templates);

            assert.equals(Object.keys(templates).length, $.ajax.callCount);
            assert.equals(this.pathToTemplate, $.ajax.getCall(0).args[0].url);
            assert.equals(pathToAnotherTemplate, $.ajax.getCall(1).args[0].url);
        },

        "test that getting a template by name requests it from the server and returns the promise": function () {
            var promise = travi.templates.get(this.templateName);

            assert.equals(
                '/templates/' + this.templateName + '.tmpl',
                jQuery.ajax.getCall(0).args[0].url
            );

            assert.isObject(promise);
            assert.isFunction(promise.promise);
        },

        "test template is rendered and returned as string": function () {
            var renderedTemplate,
                dataForTemplate = {
                    data: 'something'
                };

            sinon.stub(jQuery.render, this.templateName).returns('renderedTemplate');

            renderedTemplate = travi.templates.render(this.templateName, dataForTemplate);

            this.assertTemplateRenderedWithData(dataForTemplate);

            assert.isString(renderedTemplate);
        },

        'test callback called after template loaded from server': function () {
            var constructedDeferred = new $.Deferred(),
                dataForTemplate = {
                    data: 'something'
                },
                callback = sinon.spy(),
                renderedTemplate = 'renderedTemplate';

            this.templates.preLoad(this.templateName);

            constructedDeferred.resolve();
            sinon.stub(jQuery, 'Deferred').returns(constructedDeferred);
            sinon.stub(jQuery.render, this.templateName).returns(renderedTemplate);

            this.templates.render(this.templateName, dataForTemplate, callback);

            assert.calledOnce($.render[this.templateName]);
            assert.calledWith($.render[this.templateName], dataForTemplate);

            assert.calledOnce(callback);
            assert.calledWith(callback, renderedTemplate);
        },

        'test callback not called when template not loaded': function () {
            var constructedDeferred = new $.Deferred(),
                dataForTemplate = {
                    data: 'something'
                },
                callback = sinon.spy();

            travi.test.common.restore($.ajax);
            sinon.stub($, 'ajax');

            sinon.stub(jQuery, 'Deferred').returns(constructedDeferred);
            sinon.stub(jQuery.render, this.templateName);

            travi.templates.render(this.templateName, dataForTemplate, callback);

            refute.called($.render[this.templateName]);
            refute.called(callback);
        },

        "test that template is not requested from server if already cached": function () {
            travi.templates.get(this.templateName);
            travi.templates.get(this.templateName);

            assert.calledOnce(jQuery.ajax);
        },

        "test that caching does not prevent other templates from loading from server": function () {
            travi.templates.get(this.templateName);
            travi.templates.get('someOtherTemplateName');

            assert.calledTwice(jQuery.ajax);
        },

        'test template can be rendered without data': function () {
            var testCase = this;

            refute.exception(function () {
                testCase.templates.render(testCase.templateName);
            });
        },

        assertTemplateRenderedWithData: function (data) {
            assert(jQuery.render[this.templateName].calledOnce);
            assert.same(data, jQuery.render[this.templateName].getCall(0).args[0]);
        },

        assertPromiseResolvedAfterCachingTemplate: function (deferred) {
            assert(deferred.resolve.calledOnce);
        },

        assertTemplateWasCached: function (templateName, templateAsString) {
            assert(jQuery.templates.calledOnce);
            assert.equals(templateName, jQuery.templates.getCall(0).args[0]);
            assert.equals(templateAsString, jQuery.templates.getCall(0).args[1]);
        },

        assertPromiseWasReturned: function (returnedPromise, promise) {
            assert.isObject(promise);
            assert.same(returnedPromise, promise);
        }
    };
}()));